C51 COMPILER V9.56.0.0   EEPROM                                                            03/04/2023 14:59:25 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE EEPROM
OBJECT MODULE PLACED IN .\Output\eeprom.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\Library\StdDriver\src\eeprom.c LARGE OPTIMIZE(7,SPEED) BROWSE INCDIR(
                    -..\Library\Device\Include;..\Library\StdDriver\inc) DEBUG OBJECTEXTEND PRINT(.\LST\eeprom.lst) TABS(2) OBJECT(.\Output\e
                    -eprom.obj)

line level    source

   1          /*--------------------------------------------------------------------------------------------------------
             --*/
   2          /*                                                                                                        
             - */
   3          /* Copyright(c) 2019 Nuvoton Technology Corp. All rights reserved.                                        
             - */
   4          /*                                                                                                        
             - */
   5          /*--------------------------------------------------------------------------------------------------------
             --*/
   6          
   7          //********************************************************************************************************
             -***
   8          //  Website: http://www.nuvoton.com
   9          //  E-Mail : MicroC-8bit@nuvoton.com
  10          //********************************************************************************************************
             -***
  11          #include "MS51_16K.H"
  12          
  13          
  14          
  15          volatile unsigned char xdata page_buffer[128];
  16          
  17          /**
  18           * @brief       Read Dataflash 
  19           * @param       Dataflash start address
  20           * @return      Dataflash Value
  21           * @details     None
  22           */
  23          unsigned char Read_APROM_BYTE(unsigned int code *u16_addr)
  24          {
  25   1          UINT8 rdata;
  26   1          rdata = *u16_addr>>8;
  27   1          return rdata;
  28   1      }
  29          
  30          
  31          /**
  32           * @brief       Write Dataflash as EEPROM, 
  33           * @param       u16EPAddr the 16bit EEPROM start address. Any of APROM address can be defined as start add
             -ress (0x3800)
  34           * @param       u8EPData the 8bit value need storage in (0x3800)
  35           * @return      none
  36           * @details     Storage dataflash page data into XRAM 380H-400H, modify data in XRAM, Erase dataflash page
             -, writer updated XRAM data into dataflash
  37           */
  38          void Write_DATAFLASH_BYTE(unsigned int u16EPAddr,unsigned char u8EPData)
  39          {
  40   1        unsigned char looptmp=0;
  41   1        unsigned int u16_addrl_r;
  42   1        unsigned int RAMtmp;
  43   1        
  44   1      //Check page start address
C51 COMPILER V9.56.0.0   EEPROM                                                            03/04/2023 14:59:25 PAGE 2   

  45   1        u16_addrl_r=(u16EPAddr/128)*128;
  46   1      //Save APROM data to XRAM0
  47   1        
  48   1        for(looptmp=0;looptmp<0x80;looptmp++)//0x80 = 128
  49   1        {
  50   2          RAMtmp = Read_APROM_BYTE((unsigned int code *)(u16_addrl_r+looptmp));
  51   2          page_buffer[looptmp]=RAMtmp;
  52   2        }
  53   1      // Modify customer data in XRAM
  54   1        page_buffer[u16EPAddr&0x7f] = u8EPData;
  55   1        
  56   1      //Erase APROM DATAFLASH page
  57   1          IAPAL = u16_addrl_r&0xff;
  58   1          IAPAH = (u16_addrl_r>>8)&0xff;
  59   1          IAPFD = 0xFF;
  60   1          set_CHPCON_IAPEN; 
  61   1          set_IAPUEN_APUEN;
  62   1          IAPCN = 0x22;     
  63   1           set_IAPTRG_IAPGO; 
  64   1          
  65   1      //Save changed RAM data to APROM DATAFLASH
  66   1          set_CHPCON_IAPEN; 
  67   1          set_IAPUEN_APUEN;
  68   1          IAPCN = 0x21;
  69   1          for(looptmp=0;looptmp<0x80;looptmp++)
  70   1          {
  71   2            IAPAL = (u16_addrl_r&0xff)+looptmp;
  72   2            IAPAH = (u16_addrl_r>>8)&0xff;
  73   2            IAPFD = page_buffer[looptmp];
  74   2            set_IAPTRG_IAPGO;      
  75   2          }
  76   1          clr_IAPUEN_APUEN;
  77   1          clr_CHPCON_IAPEN;
  78   1      }  
  79          
  80          
  81          //-------------------------------------------------------------------------
  82          void Write_DATAFLASH_ARRAY(unsigned int u16_addr,unsigned char *pDat,unsigned int num)
  83          {
  84   1        unsigned char CPageAddr,EPageAddr,cnt;
  85   1        CPageAddr=u16_addr>>7;
  86   1        EPageAddr=(u16_addr+num)>>7;
  87   1        while(CPageAddr!=EPageAddr)
  88   1        {
  89   2          cnt=WriteDataToOnePage(u16_addr,pDat,128);
  90   2          u16_addr+=cnt;
  91   2          pDat+=cnt;
  92   2          num-=cnt;
  93   2          CPageAddr=u16_addr>>7;
  94   2        }
  95   1        if(num)
  96   1        {
  97   2          WriteDataToOnePage(u16_addr,pDat,num);
  98   2        }
  99   1      }
 100          //-------------------------------------------------------------------------
 101          void Read_DATAFLASH_ARRAY(unsigned int u16_addr,unsigned char *pDat,unsigned int num)
 102          {
 103   1        unsigned int i;
 104   1        for(i=0;i<num;i++)
 105   1          pDat[i] = *(unsigned char code *)(u16_addr+i);
 106   1      }
C51 COMPILER V9.56.0.0   EEPROM                                                            03/04/2023 14:59:25 PAGE 3   

 107          
 108          //--------------------------------------------------------------------------------------------------------
             ----
 109          unsigned char WriteDataToOnePage(unsigned int u16_addr,const unsigned char *pDat,unsigned char num)
 110          {
 111   1        unsigned char i,offset;
 112   1        unsigned char code *pCode;
 113   1        unsigned char xdata xd_tmp[128];
 114   1      
 115   1        set_CHPCON_IAPEN; 
 116   1        set_IAPUEN_APUEN;
 117   1      
 118   1        offset=u16_addr&0x007F;
 119   1        i = PAGE_SIZE - offset;
 120   1        
 121   1        if(num>i)num=i;
 122   1        pCode = (unsigned char code *)u16_addr;
 123   1        for(i=0;i<num;i++)
 124   1        {
 125   2          if(pCode[i]!=0xFF)break;
 126   2        }
 127   1        if(i==num)
 128   1        {
 129   2          IAPCN =BYTE_PROGRAM_APROM;
 130   2          IAPAL = u16_addr;
 131   2          IAPAH = u16_addr>>8;
 132   2          for(i=0;i<num;i++)
 133   2          {
 134   3            IAPFD = pDat[i];
 135   3            set_IAPTRG_IAPGO;
 136   3            IAPAL++;
 137   3          }
 138   2          for(i=0;i<num;i++)
 139   2          {
 140   3            if(pCode[i]!=pDat[i])break;
 141   3          }
 142   2          if(i!=num) goto WriteDataToPage20;
 143   2        }
 144   1        else
 145   1        {
 146   2          WriteDataToPage20:
 147   2          pCode = (unsigned char code *)(u16_addr&0xff80);
 148   2          for(i=0;i<128;i++)
 149   2          {
 150   3            xd_tmp[i] = pCode[i];
 151   3          }
 152   2          for(i=0;i<num;i++)
 153   2          {
 154   3            xd_tmp[offset+i] = pDat[i];
 155   3          }
 156   2          do
 157   2          {
 158   3            IAPAL = (u16_addr&0xff80);
 159   3            IAPAH = u16_addr>>8;
 160   3            IAPCN = PAGE_ERASE_APROM;
 161   3            IAPFD = 0xFF;  
 162   3            set_IAPTRG_IAPGO; 
 163   3            IAPCN =BYTE_PROGRAM_APROM;
 164   3            for(i=0;i<128;i++)
 165   3            {
 166   4              IAPFD = xd_tmp[i];
 167   4              set_IAPTRG_IAPGO;
C51 COMPILER V9.56.0.0   EEPROM                                                            03/04/2023 14:59:25 PAGE 4   

 168   4              IAPAL++;
 169   4            }
 170   3            for(i=0;i<128;i++)
 171   3            {
 172   4              if(pCode[i]!=xd_tmp[i])break;
 173   4            }
 174   3          }while(i!=128);
 175   2          
 176   2        }
 177   1        clr_CHPCON_IAPEN;
 178   1        
 179   1        return num;
 180   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1250    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    128     159
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
